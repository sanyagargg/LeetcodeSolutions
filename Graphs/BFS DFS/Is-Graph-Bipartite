class Solution {
public:
    bool isBipartite(vector<vector<int>>& graph) {
        int n = graph.size();
        vector<int> color(n, -1); // -1 means unvisited

        function<bool(int, int)> dfs = [&](int node, int c) {
            color[node] = c;
            for (int neighbor : graph[node]) {
                if (color[neighbor] == -1) {
                    if (!dfs(neighbor, c ^ 1)) return false;
                } else if (color[neighbor] == c) {
                    return false;
                }
            }
            return true;
        };

        for (int i = 0; i < n; ++i) {
            if (color[i] == -1) {
                if (!dfs(i, 0)) return false;
            }
        }
        return true;
    }
};
